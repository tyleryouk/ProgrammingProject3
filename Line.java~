/** Tyler Youk: 3D Line Class */

public class Line {
  
  /**Instance variables*/
  private Point p1;
  private Point p2;

  /**No @param constructor*/
  public Line(){
    this.setP1(null);
    this.setP2(null);}
  
  /**Two @param constructor*/
  public Line(Point p1,Point p2){
    this.setP1(p1);
    this.setP2(p2);}
  
  /**Two @param constructor*/
  public Line(Point p1,Point2D p2){
    this.setP1(p1);
    this.setP2(new Point(p2.getX(),p2.getY(),0));}
  
  /**Two @param constructor*/
  public Line(Point2D p1,Point p2){
    this.setP1(new Point(p1.getX(),p1.getY(),0));
    this.setP2(p2);}
  
  /**Two @param constructor*/
public Line(Point2D p1,Point2D p2){
this.setP1(new Point(p1.getX(),p1.getY(),0));
this.setP2(new Point(p2.getX(),p2.getY(),0));
}
public Point getP2() {
return p2;
}
public void setP2(Point p2) {
this.p2 = p2;
}
public Point getP1() {
return p1;
}
public void setP1(Point p1) {
this.p1 = p1;
}

public String toString(){
double vx=this.p1.getX()-this.p2.getX();
double vy=this.p1.getY()-this.p2.getY();
double vz=this.p1.getZ()-this.p2.getZ();

String ret="";
ret+="x="+this.p1.getX();
if(vx<0){ret+=vx+"t";}
else{ret+="+"+vx+"t";}
ret+=" , ";
ret+="y="+this.p1.getY();
if(vy<0){ret+=vy+"t";}
else{ret+="+"+vy+"t";}
ret+=" , ";
ret+="z="+this.p1.getZ();
if(vz<0){ret+=vz+"t";}
else{ret+="+"+vz+"t";}

return ret;
}
// public static boolean equals(Line line1,Line2D line2){

public static boolean equals(Line line1,Line2D line2){
Point2D p1=line2.getP1();
Point2D p2=line2.getP2();

Line line=new Line(new Point(p1.getX(),p1.getY(),0),new Point(p2.getX(),p2.getY(),0));

double [] vec=line.getVector();
double [] veca=line1.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}
public static boolean equals(Line2D line1,Line2D line2){
Point2D p1=line2.getP1();
Point2D p2=line2.getP2();

Point2D p1_=line1.getP1();
Point2D p2_=line1.getP2();


Line line=new Line(new Point(p1.getX(),p1.getY(),0),new Point(p2.getX(),p2.getY(),0));
Line line_=new Line(new Point(p1_.getX(),p1_.getY(),0),new Point(p2_.getX(),p2_.getY(),0));

double [] vec=line.getVector();
double [] veca=line_.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}
public static boolean equals(Line2D line1,Line line2){
Point2D p1=line1.getP1();
Point2D p2=line1.getP2();

Line line=new Line(new Point(p1.getX(),p1.getY(),0),new Point(p2.getX(),p2.getY(),0));

double [] vec=line.getVector();
double [] veca=line2.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}
public static boolean equals(Line line1,Line line2){
double [] vec=line1.getVector();
double [] veca=line2.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}


public double [] getVector(){
double vx=this.p1.getX()-this.p2.getX();
double vy=this.p1.getY()-this.p2.getY();
double vz=this.p1.getZ()-this.p2.getZ();
double [] ret=new double[3];
ret[0]=vx/Math.sqrt(vx*vx+vy*vy+vz*vz);
ret[1]=vy/Math.sqrt(vx*vx+vy*vy+vz*vz);
ret[2]=vz/Math.sqrt(vx*vx+vy*vy+vz*vz);

if(ret[0]<0){
ret[0]=0-ret[0];
ret[1]=0-ret[1];
ret[2]=0-ret[2];
}

return ret;
}
public static boolean isParallel(Line line1,Line2D line2){
Point2D p1=line2.getP1();
Point2D p2=line2.getP2();

Line line=new Line(new Point(p1.getX(),p1.getY(),0),new Point(p2.getX(),p2.getY(),0));

double [] vec=line.getVector();
double [] veca=line1.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}
public static boolean isParallel(Line2D line1,Line2D line2){
Point2D p1=line2.getP1();
Point2D p2=line2.getP2();

Point2D p1_=line1.getP1();
Point2D p2_=line1.getP2();


Line line=new Line(new Point(p1.getX(),p1.getY(),0),new Point(p2.getX(),p2.getY(),0));
Line line_=new Line(new Point(p1_.getX(),p1_.getY(),0),new Point(p2_.getX(),p2_.getY(),0));

double [] vec=line.getVector();
double [] veca=line_.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}
public static boolean isParallel(Line2D line1,Line line2){
Point2D p1=line1.getP1();
Point2D p2=line1.getP2();

Line line=new Line(new Point(p1.getX(),p1.getY(),0),new Point(p2.getX(),p2.getY(),0));

double [] vec=line.getVector();
double [] veca=line2.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}
public static boolean isParallel(Line line1,Line line2){
double [] vec=line1.getVector();
double [] veca=line2.getVector();

double ck=(vec[0]-veca[0])+(vec[1]-veca[1])+(vec[2]-veca[2]);

return ck==0;
}


public static Point intersection(Line line1,Line line2){
double [] v1=line1.getVector();
double [] v2=line2.getVector();

double ax1=line1.getP1().getX();
double ax2=line2.getP1().getX();


double ay1=line1.getP1().getY();
double ay2=line2.getP1().getY();

double az1=line1.getP1().getZ();
double az2=line2.getP1().getZ();


double l1=ax1-ax2;
double l2=ay1-ay2;
double l3=az1-az2;

double t1,s1;
double t2,s2;

s1=(l1*v1[1]-l2*v2[1])/(v2[0]*v1[1]-v1[0]*v2[1]);
s2=(l2*v1[2]-l3*v2[2])/(v2[1]*v1[2]-v1[1]*v2[2]);

t1=(l1*v2[1]-l2*v1[1])/(-v1[0]*v2[1]+v2[0]*v1[1]);
t2=(l1*v2[2]-l2*v1[2])/(-v1[1]*v2[2]+v2[1]*v1[2]);


if(t1==t2 && s1==s2){
return (new Point(ax1+t1*v1[0],ay1+t1*v1[1],az1+t1*v1[2]));
}
else{
return null;
}
}
public static Point2D intersection(Line2D line1,Line2D line2){
double v1=((line1.getP1().getX()-line1.getP2().getX()))/((line1.getP1().getY()-line1.getP2().getY()));
double v2=((line2.getP1().getX()-line2.getP2().getX()))/((line2.getP1().getY()-line2.getP2().getY()));

double a1=line1.getP1().getX();
double b1=line1.getP1().getY();

double a2=line2.getP1().getX();
double b2=line2.getP1().getY();


double newy=((b1*v1-v2*b2)-(a1-a2))/(v1-v2);
double newx=((a1/v1-a2/v2)-(b1-b2))/(1/v1-1/v2);

return (new Point2D(newx,newy));
}
}
